FORMAT: 1A
HOST: https://{your ripple-rest server}

# ripple-rest
A RESTful API for interacting with the Ripple Network.

## Differences from standard Ripple data formats

### The `client_resource_id`

The `client_resource_id` is a new field introduced by this API that is used to prevent duplicate resource submissions and confirm that submissions have been validated.

The `client_resource_id` is required for all submissions to `ripple-rest`. If another resource with the same `client_resource_id` as one that this instance of `ripple-rest` has marked as `pending` or `validated`, `ripple-rest` will assume that the second one was submitted accidentally. This helps clients prevent double spending on payments, even if the connection to `ripple-rest` is interrupted before the client can confirm the success or failure of a payment. 

Universally Unique Identifiers (UUIDs), are recommended for the `client_resource_id`. For more information on UUIDs see [here](http://en.wikipedia.org/wiki/Universally_unique_identifier). Note that 256-bit hex strings are disallowed because of the potential confusion with transaction hashes.

### New data formats

This API uses different submission and retrieval formats for payments and other transactions than other Ripple technologies. These new formats are intended to standardize fields across different transaction types (Payments, Orders, etc). See each resource section for more information.

### No XRP drops

Both `rippled` and `ripple-lib` use XRP "drops", or millionths (1/1000000) of an XRP, to denote amounts in XRP. This API uses whole XRP units in amount fields and in reporting network transaction fees paid.

### XRP Amount as an object

Outside of this API, XRP Amounts are usually denoted by a string representing XRP drops. Not only does this API not use XRP drops, for consistency XRP represented here as an `Amount` object like all other currencies. See the [`Amount`](#amounts) format for more information.

### UNIX Epoch instead of Ripple Epoch

This API uses the more standard UNIX timestamp instead of the Ripple Epoch Offset to denote times. The UNIX timestamp is the number of milliseconds since January 1st, 1970 (00:00 UTC). In `rippled` timestamps are stored as the number of seconds since the Ripple Epoch, January 1st, 2000 (00:00 UTC).

## Amounts

Note that all amounts in `ripple-rest` are denoted as objects with the following format:

```
{
  "value": "1.0", // Represented as a string to retain precision
  "currency": "USD",
  "issuer": "r..."
}
```

XRP amounts are formatted in the same way, with issuer set to an empty string:

```
{
  "value": "1.0",
  "currency": "XRP",
  "issuer": ""
}
```

# Group Payments

## Payment Format

### Minimum Required Fields

- `source_account` - The Ripple Address of the sender's account
- `destination_account` - The Ripple Address of the receiver's account
- `destination_amount` - The [Amount](#Amounts) that will be delivered to the destination_account

### Optional Fields

- `source_tag` - An optional string representation of a 32-bit integer that is used to identify the sender's hosted account at a gateway
- `destination_tag` - An optional string representation of a 32-bit integer that is used to identify the receiver's hosted account at a gateway
- `source_amount` - An optional [Amount](#Amounts) that should be specified for cross-currency payments or payments to and from the same currency but issued by different gateways. The source_account will be charged a maximum of the source_amount's value + the source_slippage
- `source_slippage` - An optional string representation of a floating point number used as a buffer added to the source_amount's value
- `invoice_id` - An optional 256-bit hash that can be used to identify a particular payment, particularly in the case of payments using the [Bridge Protocol](https://ripple.com/wiki/Services_API#Outbound_bridges). Note that this is distinct from the client_resource_id
- `paths` - A field that should be treated as opaque, used internally to specify payment "paths" through the network. This will be set automatically by the pathfinding endpoint but advanced users can set this to a JSON array representing the [PathSet](https://ripple.com/wiki/Payment_paths)
- `partial_payment` - An optional boolean that indicates whether the payment should be executed even if the whole amount cannot be delivered because of a lack of liquidity or funds in the source_account account. Defaults to false
- `no_direct_ripple` - An optional boolean that can be set to true if paths are specified and the sender would like the Ripple Network to disregard any direct paths from the source_account to the destination_account. This may be used to take advantage of an arbitrage opportunity or by gateways wishing to issue balances from a hot wallet to a user who has mistakenly set a trustline directly to the hot wallet. Defaults to false

### Fields Generated After Submission

- `state` - The current state of the payment. Possible values are "pending", "validated", or "failed"
- `result` - The rippled result code. "tesSUCCESS" indicates the payment was accepted and applied by the rippled, anything else indicates a failure. Error categories are documented [here](https://ripple.com/wiki/Transaction_errors)
- `ledger` - The ledger sequence number containing the payment record. If the payment failed off-network this indicates the ledger at which time the payment failed
- `hash` - The 256-bit hash of the payment's serialized binary format. This is used throughout the Ripple protocol as the unique identifier for the transaction
- `timestamp` - The timestamp representing when the payment was validated and written into the Ripple ledger
- `fee` - The Ripple Network transaction fee, represented in whole XRP (NOT "drops", or millionths of an XRP, which is used elsewhere in Ripple)
- `direction` - The direction of the payment, from the perspective of the account being queried. Possible values are "incoming", "outgoing", and "passthrough"
- `source_balance_changes` - Parsed from the validated transaction metadata, this array of [Amounts](#Amounts) represents all of the changes to balances held by the source_account. Most often this will have one amount representing the Ripple Network fee and, if the source_amount was not XRP, one amount representing the actual source_amount that was sent
- `destination_balance_changes` - Parsed from the validated transaction metadata, this array of [Amounts](#Amounts) represents the changes to balances held by the destination_account. For those receiving payments this is important to check because if the partial_payment flag is set this value may be less than the destination_amount

## Payment Submission [/v1/payments]

### POST 

Submit a payment.

+ Request

    + Body
    
    ```
    {
        "secret": "s...",
        "client_resource_id": "cd26cd93-6363-45e1-8270-1df6bf12461e",
        "payment": {
            "source_account": "rKXCummUHnenhYudNb9UoJ4mGBR75vFcgz",
            "destination_account": "rNw4ozCG514KEjPs5cDrqEcdsi31Jtfm5r",
            "destination_amount": {
                "value": ".000010",
                "currency": "XRP",
                "issuer": ""
            }
        }
    }
    ```
    
    + Schema
    
    ```
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "Payment",
      "description": "A flattened Payment object used by the ripple-rest API",
      "type": "object",
      "properties": {
        "source_account": {
          "description": "The Ripple account address of the Payment sender",
          "$ref": "RippleAddress"
        },
        "source_tag": {
          "description": "A string representing an unsigned 32-bit integer most commonly used to refer to a sender's hosted account at a Ripple gateway",
          "$ref": "UINT32"
        },
        "source_amount": {
          "description": "An optional amount that can be specified to constrain cross-currency payments",
          "$ref": "Amount"
        },
        "source_slippage": {
          "description": "An optional cushion for the source_amount to increase the likelihood that the payment will succeed. The source_account will never be charged more than source_amount.value + source_slippage",
          "$ref": "FloatString"
        },
        "destination_account": {
          "$ref": "RippleAddress"
        },
        "destination_tag": {
          "description": "A string representing an unsigned 32-bit integer most commonly used to refer to a receiver's hosted account at a Ripple gateway",
          "$ref": "UINT32"
        },
        "destination_amount ": {
          "description": "The amount the destination_account will receive",
          "$ref": "Amount"
        },
        "invoice_id": {
          "description": "A 256-bit hash that can be used to identify a particular payment",
          "$ref": "Hash256"
        },
        "paths ": {
          "description": "A \"stringified\" version of the Ripple PathSet structure that users should treat as opaque",
          "type": "string"
        },
        "partial_payment": {
          "description": "A boolean that, if set to true, indicates that this payment should go through even if the whole amount cannot be delivered because of a lack of liquidity or funds in the source_account account",
          "type": "boolean"
        },
        "no_direct_ripple": {
          "description": "A boolean that can be set to true if paths are specified and the sender would like the Ripple Network to disregard any direct paths from the source_account to the destination_account. This may be used to take advantage of an arbitrage opportunity or by gateways wishing to issue balances from a hot wallet to a user who has mistakenly set a trustline directly to the hot wallet",
          "type": "boolean"
        }
      },
      "required": ["source_account", "destination_account", "destination_amount"]
    }
    ```

+ Response 200 (application/json)

    ```
    {
        "success": true,
        "status_url": ".../v1/accounts/rKXCummUHnenhYudNb9UoJ4mGBR75vFcgz/payments/cd26cd93-6363-45e1-8270-1df6bf12461e"
    }
    ```

## Individual Payment Retrieval [/v1/accounts/{address}/payments/{hash,client_resource_id}]
### GET

Retrieve the details of a particular payment from `rippled` or, in the case of one submitted to `ripple-rest` that failed locally, the local database of `ripple-rest`. 

+ Parameters

    + hash (optional, 256-bit string written in hex, `389720F6FD8A144F171708F9ECB334D704CBCFEFBCDA152D931AC34FB5F9E32B`) ... The hash of a particular payment transaction. Note that transaction hashes are used throughout Ripple as unique identifiers for transactions.
    + client_resource_id (optional, string of ASCII-printable characters, `d9aa7bf0-f42a-4c73-b5e7-3018f6a42792`) ... The client-supplied unique identifier of a payment submitted through `ripple-rest`. Note that these are only stored in `ripple-rest`'s, not in the transaction details on Ripple.
    
+ Response 200

## Bulk Payment Retrieval [/v1/accounts/{address}/payments{?start_ledger,end_ledger,exclude_failed,source_account,destination_account,earliest_first,results_per_page,page}]
### GET

Retrieve the details of multiple payments from `rippled` and `ripple-rest`. The response will contain an array of objects that each have a `client_resource_id` field and a `payment` field.

If no payments match the specified parameters the `payments` array will be empty.

+ Parameters

    + start_ledger = `(earliest ledger in connected rippled)` (optional, integer, `32570`) ... If `earliest_first` is set to true this will be the index number of the earliest ledger queried, or the most recent one if `earliest_first` is set to false. 
    + end_ledger = `(latest ledger in connected rippled)` (optional, integer, `5000000`) ... If `earliest_first` is set to true this will be the index number of the most recent ledger queried, or the earliest one if `earliest_first` is set to false.
    + exclude_failed = `false` (optional, boolean, `false`) ... If set to true, limit the results to payments that were successfully validated and written into the Ripple Ledger
    + source_account (optional, Ripple Address, `rKXCummUHnenhYudNb9UoJ4mGBR75vFcgz`) ... If specified, limit the results to payments initiated by a particular account
    + destination_account (optional, Ripple Address, `rNw4ozCG514KEjPs5cDrqEcdsi31Jtfm5r`) ... If specified, limit the results to payments made to a particular account
    + earliest_first = `true` (optional, boolean, `true`) ... Determines whether results should be displayed in ascending or descending order, with respect to the ledger/time at which they were validated
    + results_per_page = `10` (optional, integer, `10`) ... Number of results to display per page
    + page = `1` (optional, integer, `1`) ... Page number. Note that if fewer results than the `results_per_page` are returned, there are no pages

+ Response 200 (application/json)

  ```
  {
    "success": true,
    "payments": [{
      "client_resource_id": "",
      "payment": {
        /* ... Payment ... */
      }
    }, {
      "client_resource_id": "",
      "payment": {
        /* ... Payment ... */
      }
    }]
  }
  ```

# Group Notifications

# Group Account Settings

# Group Balances

# Group Trustlines

# Group Orders

This section includes endpoints to submit, retrieve, and delete an account's oustanding orders, as well as to retrieve the bids and asks from a particular orderbook.

## Base and Counter Currencies

Although `rippled` does not use the concepts of base and counter currencies, `ripple-rest` uses a configurable prioritization and exception list to determine the base and counter currency for an order retrieved from Ripple. 

### Default Currency Prioritization

1. XRP
2. EUR
3. GBP
4. AUD
5. NZD
6. USD
7. CAD
8. CHF
9. MXN
10. SGD 
11. NOK 
12. JPY
13. CNY

### Default Currency Cross Exceptions

*Note that exceptions are written as {base}/{counter}

1. ZAR/JPY

## Note about Amounts and Exchange Rate

`rippled` uses the concepts of "TakerPays" and "TakerGets" to define the terms of an order. `ripple-rest` uses the currency prioritization and exceptions list to translate "base" and "counter" amounts into the format used by `rippled`.

When submitting orders to `ripple-rest`, two of the following must be supplied but the third is optional: base_amount's value, counter_amount's value, and exchange_rate. For example, both of the following would be valid:

```
{
  /* ... */
  "base_amount": {
    "value": "10",
    "currency": "XRP",
    "issuer": ""
  },
  "counter_amount": {
    "value": "1",
    "currency": "USD",
    "issuer": "r..."
  }
  /* ... */
}
```
or

```
{
  /* ... */
  "base_amount": {
    "value": "10",
    "currency": "XRP",
    "issuer": ""
  },
  "counter_amount": {
    "currency": "USD",
    "issuer": "r..."
  },
  "exchange_rate": "0.1"
  /* ... */
}
```

If the value of either the base_amount or counter_amount is omitted, a bignumber library will be used to retain precision while inferring the value omitted from the exchange rate and the value that is supplied. `rippled` does not allow submissions to set their own exchange rate so ultimately the order will be submitted with the complete base and counter amounts.


## Order Format

### Minimum Required Fields

+ `account` - Ripple Address of the order's creator
+ `is_bid` - Order is a bid if true, or an ask otherwise
+ `base_amount` - If the order is a bid, the [Amount](#Amounts) representing what the order's creator wishes to buy. If the order is an ask, the [Amount](#Amounts) representing what the order's creator wishes to sell. If an order is partially or fully consumed this value will decrease. *See _Note about Amounts and Exchange Rate_ above
+ `counter_amount` - If the order is a bid, the [Amount](#Amounts) representing what the order's creator wishes to sell. If the order is an ask, the [Amount](#Amounts) representing what the order's creator wishes to buy. If an order is partially or fully consumed this value will decrease. *See _Note about Amounts and Exchange Rate_ above
+ `exchange_rate` - The quantity of the *counter* currency needed to buy 1 unit of the base currency. This value is fixed when the order is created and will never change, even if the order is partially or fully consumed and rounding error causes this value to not exactly equal the counter_amount divided by the base_amount. *See _Note about Amounts and Exchange Rate_ above

### Optional Fields

+ `expiration_timestamp` - The timestamp after which the order will no longer be considered active
+ `ledger_timeout` - The number of ledgers after the order is initially submitted to `ripple-rest` after which it will no longer be considered active
+ `immediate_or_cancel` - Boolean that if set to true indicates this order should only take orders that are available at the time of execution and will not create an entry in the Ripple Ledger
+ `fill_or_kill` - Boolean that if set to true this order will only take orders that fill the base_amount and are available at the time of execution and will not create an entry in the Ripple Ledger
+ `maximize_buy_or_sell` - Boolean that if set to true and the order is a bid indicates that the creator wishes to buy up to the base_amount even if the counter_amount is exceeded. If it is true and the order is an ask it indicates the creator wishes to sell up to the counter_amount even if the base_amount is exceeded
+ `cancel_replace` - The sequence number of an outstanding order that should be cancelled and replaced by this one

### Fields Generated After Submission

+ `sequence` - The sequence number of the order on the creator's account. All orders can be uniquely identified by the address of the creator and their sequence number
+ `state` - Possible values are "active", "partially_filled", "filled", "cancelled", "expired", "failed"
+ `ledger` - If the order is returned from a historical query, the last ledger sequence when the order was modified
+ `hash` - If the order is returned from a historical query, the hash of the last transaction that modified the order
+ `previous` - If the order is returned from a historical query, the URI to retrieve the previous state of the order

## Order Submission [/v1/orders]

### POST 

Submit a new order.

+ Request

  + Body

  ```
  {
    "secret": "s...",
    "client_resource_id": "71609718-e19b-46b3-9ec7-a11441748f5f",
    "order": {
      "account": "rKXCummUHnenhYudNb9UoJ4mGBR75vFcgz",
      "base_amount": {
        "value": "10",
        "currency": "XRP",
        "issuer": ""
      },
      "counter_amount": {
        "value": "1.0",
        "currency": "USD",
        "issuer": "r..."
      }
    }
  }
  ```

  + Schema

  ```
  {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Order",
    "description": "A simplified Order object used by the ripple-rest API (note that \"orders\" are referred to elsewhere in the Ripple protocol as \"offers\")",
    "type": "object",
    "properties": {
      "account": {
        "description": "The Ripple account address of the order's creator",
        "$ref": "RippleAddress"
      },
      "is_buy": {
        "description": "If set to true the order it indicates that the creator is looking to receive the base_amount in exchange for the counter_amount. If undefined or set to false it indicates that the creator is looking to sell the base_amount to receive the counter_amount",
        "type": "boolean"
      },
      "base_amount": {
        "description": "The amount of currency the seller_account is seeking to buy. If other orders take part of this one, this value will change to represent the amount left in the order. This may be specified along with the counter_amount OR exchange_rate but not both. When the order is parsed from the Ripple Ledger the base currency will be determined according to the Priority Ranking of Currencies (XRP,EUR,GBP,AUD,NZD,USD,CAD,CHF,JPY,CNY) and if neither currency is listed in the ranking the base currency will be the one that is alphabetically first",
        "$ref": "Amount"
      },
      "counter_amount": {
        "description": "The amount of currency being sold. If other orders take part of this one, this value will change to represent the amount left in the order. This may be specified along with the base_amount OR the exchange_rate but not both",
        "$ref": "Amount"
      },
      "exchange_rate": {
        "description": "A string representation of the order price, defined as the cost one unit of the base currency in terms of the counter currency. This may be specified along with the base_amount OR the counter_amount but not both. If it is unspecified it will be computed automatically based on the counter_amount divided by the base_amount",
        "$ref": "FloatString"
      },
      "expiration_timestamp": {
        "description": "The ISO combined date and time string representing the point beyond which the order will no longer be considered active or valid",
        "$ref": "Timestamp"
      },
      "ledger_timeout": {
        "description": "A string representation of the number of ledger closes after submission during which the order should be considered active",
        "type": "string",
        "pattern": "^[0-9]*$"
      },
      "immediate_or_cancel": {
        "description": "If set to true this order will only take orders that are available at the time of execution and will not create an entry in the Ripple Ledger",
        "type": "boolean"
      },
      "fill_or_kill": {
        "description": "If set to true this order will only take orders that fill the base_amount and are available at the time of execution and will not create an entry in the Ripple Ledger",
        "type": "boolean"
      },
      "maximize_buy_or_sell": {
        "description": "If set to true and it is a buy order it will buy up to the base_amount even if the counter_amount is exceeded, if it is a sell order it will sell up to the counter_amount even if the base_amount is exceeded",
        "type": "boolean"
      },
      "cancel_replace": {
        "description": "If this is set to the sequence number of an outstanding order, that order will be cancelled and replaced with this one",
        "type": "string",
        "pattern": "^d*$"
      }
    },
    "required": ["account"]
  }
  ```

+ Response 200 (application/json)

  ```
  {
    "success": true,
    "status_url": ".../v1/accounts/rKXCummUHnenhYudNb9UoJ4mGBR75vFcgz/orders/71609718-e19b-46b3-9ec7-a11441748f5f"
  }
  ```

## Order Retrieval and Cancellation [/v1/accounts/{address}/orders/{sequence,client_resource_id}]

### GET 

Retrieve the details of a particular outstanding order.

+ Parameters

  + address (required, Ripple Address) ... The Ripple address of the owner's account
  + sequence (optional, integer) ... The sequence number of the order to retrieve. All orders can be uniquely identified by the account that placed them and their sequence number. Either the sequence number or the client_resource_id must be supplied
  + client_resource_id (optional, string of ASCII-printable characters, `71609718-e19b-46b3-9ec7-a11441748f5f`) ... The client-supplied unique identifier of an order submitted through `ripple-rest`. Note that these are only stored in `ripple-rest`'s, not in the order details on Ripple. Either the client_resource_id or the sequence number must be supplied

+ Response 200

### DELETE

Delete an outstanding order.

+ Parameters

  + address (required, Ripple Address) ... The Ripple address of the owner's account
  + sequence (optional, integer) ... The sequence number of the order to delete. All orders can be uniquely identified by the account that placed them and their sequence number
  + client_resource_id (optional, string of ASCII-printable characters, `71609718-e19b-46b3-9ec7-a11441748f5f`) ... The client-supplied unique identifier of an order submitted through `ripple-rest`. Note that these are only stored in `ripple-rest`'s, not in the order details on Ripple. Either the client_resource_id or the sequence number must be supplied

+ Request

  + Body

  ```
  {
    "secret": "s..."
  }
  ```

+ Response 200

## Account Orders [/v1/accounts/{address}/orders{?bid_currency,ask_currency,start_ledger,end_ledger}]

### GET

Retrieve details of the specified account's orders. If `start_ledger` and `end_ledger` are *not* specified, the results will include only outstanding orders. 

If `start_ledger` and/or `end_ledger` are specified the results will represent all of the modifications to the account's orders in the given ledger range. Note that orders modified multiple times (e.g. that are partially filled by a series of different orders) will appear once per modification. Individual orders can be uniquely identified by their sequence number. Results are not paginated so the snapshot view is best used on relatively small ledger ranges (e.g. 10 ledgers).

+ Parameters

  + address (required, Ripple Address) ... The Ripple address of the owner's account
  + base_currency (optional, 3-character standard currency code or 20-byte hex representation + optional issuer, `XRP`) ... Limit results to orders with the specified base currency
  + counter_currency (optional, 3-character standard currency code or 20-byte hex representation + optional issuer, `USD+r...`) ... Limit results to orders with the specified counter currency
  + start_ledger = `(earliest ledger in rippled if end_ledger is specified)` (optional, integer, `5000000`) ... Retrieve the modifications to all of the account's orders since the given ledger. If end_ledger is set but start_ledger is not, start_ledger will default to the earliest ledger in the rippled's database
  + end_ledger = `(last closed ledger if start_ledger is specified)` (optional, integer, `5000000`) ... Retrieve the modifications to all of the account's orders until the given ledger. If start_ledger is set but end_ledger is not, end_ledger will default to the rippled's last closed ledger

+ Response 200

## Orderbooks [/v1/orders/{base_currency}/{counter_currency}{?bids_or_asks,cutoff_price,start_ledger,end_ledger}]
### GET 

Retrieve orders from the order book identified by the given base and counter currencies. The `bids_or_asks` parameter can be set to limit results to either bids or asks only.

If `start_ledger` and/or `end_ledger` are specified, this will retrieve a snapshot of all of the modifications to the orderbook in the specified ledger range. Note that orders modified multiple times (e.g. that are partially filled by a series of different orders) will appear once per modification. Individual orders can be uniquely identified by their account and sequence number. Changes can be merged into the previous state of the orderbook on the client's side by keeping orders indexed by their account and sequence number and adding or updating entries based on the snapshots. Results are not paginated so the snapshot view is best used on relatively small ledger ranges (e.g. 10 ledgers).

+ Parameters

  + base_currency (required, 3-character standard currency code or 20-byte hex representation + required issuer unless currency is XRP, `XRP`) ... Retrieve current orderbook where this is the base currency
  + counter_currency (required, 3-character standard currency code or 20-byte hex representation + required issuer unless currency is XRP, `USD+r...`) ... Retrieve current orderbook where this is the counter currency
  + bids_or_asks (optional, "bids" or "asks", `bids`) ... Limit the results to either bids or asks
  + cutoff_price (optional, floating point number, `0.00775`) ... Must be used in combination with bids_or_asks. If specified with bids_or_asks set to bids, limit results to orders with exchange_rates greater than this value. If specified with bids_or_asks set to asks, limit results to orders with exchange_rates less than this value
  + start_ledger = `(earliest ledger in rippled if end_ledger is specified)` (optional, integer, `5000000`) ... Retrieve a snapshot of the changes to the orderbook since the given ledger. If end_ledger is set but start_ledger is not, start_ledger will default to the earliest ledger in the rippled's database
  + end_ledger = `(last closed ledger if start_ledger is specified)` (optional, integer, `5000010`) ... Retrieve a snapshot of the changes to the orderbook until the given ledger. If start_ledger is set but end_ledger is not, end_ledger will default to the rippled's last closed ledger


+ Response 200

  ```
  {
    "success": true,
    "start_ledger": 5000000,
    "end_ledger": 5000010,
    "orders": [{
      /* ... Order ... */
    }, {
      /* ... Order ... */
    }]
  }
  ```
